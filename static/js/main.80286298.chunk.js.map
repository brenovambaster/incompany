{"version":3,"sources":["api/WebApi.js","api/CategoriaRepository.js","components/categoria/CategoriaItemForm.js","components/PopupForm.js","components/Mensagem.js","components/ValidationErrors.js","components/notificacao/Notificacao.js","components/categoria/CategoriaList.js","api/UsuarioRepository.js","components/usuario/UsuarioItemForm.js","components/usuario/UsuarioList.js","api/Auth.js","components/BarraTopo.js","api/CursoRepository.js","components/curso/CursoList.js","components/aluno/Aluno.js","components/Dashboard.js","api/UnidadeRepository.js","components/material/MaterialItemForm.js","api/MaterialRepository.js","api/QuestionarioRepository.js","api/AlternativaRepository.js","components/alternativa/AlternativaList.js","components/questionario/QuestionarioList.js","components/material/MaterialList.js","components/unidade/UnidadeList.js","api/TagRepository.js","components/certificado/Certificado.js","components/curso/CursoDetalhe.js","components/login/Login.js","components/usuario/UsuarioDetalhe.js","App.js","serviceWorker.js","index.js"],"names":["WebApi","Object","classCallCheck","this","createClass","key","value","axios","create","baseURL","getUrl","timeout","host","CategoriaRepository","get","categoria","post","delete","data","CategoriaItemForm","_ref","titulo","onClickAction","changeAction","react_default","a","createElement","Form","encType","Header","Group","widths","Field","name","onChange","placeholder","descricao","Button","onClick","icon","basic","includes","PopupForm","position","content","trigger","onCloseAction","Popup","wide","onClose","on","Mensagem","msg","Icon","ValidationErrors","erros","List","size","Array","isArray","map","erro","index","Item","Mensagem_Mensagem","Notificacao","resultado","msgs","elementMsg","flag","ValidationErrors_ValidationErrors","msgType","toast","TYPE","INFO","WARNING","type","CategoriaList","_Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","categorias","categoriaSelecionada","initializeCategoria","updateCategorias","carregarCategorias","handleChangeDescricaoCategoria","bind","assertThisInitialized","handleClickCategoriaItem","selectCategoria","limparSelecaoCategoria","inherits","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","setState","stop","apply","arguments","_updateCategorias","_callee2","_context2","all","sent","id","e","obj","element","undefined","target","acao","salvarCategoria","removerCategoria","gerar","_salvarCategoria","_callee3","_context3","t0","save","t1","setStatusRequisicao","_removerCategoria","_callee4","_context4","remove","_this2","Dimmer","Dimmable","blurring","as","Segment","active","PopupForm_PopupForm","className","floated","CategoriaItemForm_CategoriaItemForm","textAlign","horizontal","animated","verticalAlign","c","Content","compact","Divider","Label","qtdCursos","inverted","loading","Component","UsuarioRepository","usuario","usuarioId","concat","login","email","_","sha256","senha","toString","enc","Hex","UsuarioItemForm","tiposUsuariosPossiveis","nome","Dropdown","tipo","clearable","options","selection","react_router_dom","to","attached","UsuarioList","usuarios","usuarioSelecionado","initializeUsuario","updateUsuarios","carregarUsuarios","handleChangeUsuario","handleClick","selectUsuario","limparSelecao","handleOncloseChange","_updateUsuarios","salvarUsuario","removerUsuario","_salvarUsuario","_removerUsuario","text","UsuarioItemForm_UsuarioItemForm","getTiposUsuariosPossiveis","u","color","Auth","localStorage","setItem","JSON","stringify","parse","getItem","clear","window","location","href","BarraTopo","auth","Menu","stackable","src","alt","item","CursoRepository","curso","curso_id","usuario_id","comentario","nota","cursoId","CursoList","cursos","cursoSelecionado","initializeCurso","updateCursos","handleChange","buildDropdownItensCategoria","categoriasItens","push","nome_tutor","categoria_id","_updateCursos","_salvarCurso","_removerCurso","_callee5","_context5","salvarCurso","removerCurso","_this3","buildCursoForm","selectCurso","Aluno","meusCursos","cursosDisoniveis","inscricao","findByIncricaoUsuario","findDisponiveis","_inscricao","inscrever","_x","Dashboard","_componentWillMount","CursoList_CursoList","UsuarioList_UsuarioList","CategoriaList_CategoriaList","Aluno_Aluno","isPerfilAdm","renderDashboardContent","renderAlunoContent","BarraTopo_BarraTopo","renderParaUsuario","UnidadeRepository","unidadeId","unidade","MaterialItemForm","material","buttonFloated","buttonTitle","seleciona","limpa","url","Checkbox","checked","final","label","MaterialRepository","materialId","material_id","unidade_id","QuestionarioRepository","questao","questoes","AlternativaRepository","questaoId","alternativaId","AlternativaList","alternativas","alternativaSelecionada","initializeAlternativa","updateAlternativas","textoNovaAlternativa","handleChangeRadios","removerAlternativa","alteraAlternativaCorreta","idAlternativa","find","guardarResposta","_alteraAlternativaCorreta","setAlternativaCorreta","_x2","texto","questao_id","ordem","correta","_updateAlternativas","findByQuestaoId","q","parseInt","_salvarAlternativa","alternativa","salvarAlternativa","_removerAlternativa","_x3","radio","QuestionarioList","materialSelecionado","cursoTitulo","materialTitulo","unidadeTitulo","modalAlternativas","updateQuestoes","questaoSelecionada","initializeQuestao","respostas","novaQuestao","salvarQuestao","enunciado","questionario","setVisibleModal","updateMateriais","update","verificaUpdateCurso","_verificaUpdateCurso","validaDados","atualiza","isCursoConcluido","isConcluido","then","dadosConclusao","Number","percentual_total","percentual_docs","percentual_questoes","_salvarQuestao","abrupt","_updateQuestoes","findByMaterialId","findById","Modal","open","TextArea","style","maxHeight","rows","width","AlternativaList_AlternativaList","Actions","setModalVisivel","_novaQuestao","nova","_removerQuestao","_callee6","_context6","resposta","_this4","resp","splice","indexOf","_enviarQuestoes","_callee7","_context7","length","enviar","_this5","Breadcrumb","sections","link","scrolling","enviarQuestoes","_this6","Grid","columns","Row","Column","alternativaCorretaTexto","removerQuestao","showModalAlternativas","renderQuestoesAluno","MaterialList","materiais","initializeMaterial","modalQuestoes","limpaSelecao","setVisibleModalQuestoes","_updateMateriais","unidadeSelecionada","possuiInteracao","m","getTipoDocumento","nomeArquivo","isImage","isCompressed","setMaterialFinal","RegExp","test","_salvarMaterial","_removerMaterial","_registrarInteracao","interacao","salvarMaterial","removerMaterial","reload","registrarInteracao","editaQuestoes","todosMaterialsDaUnidadeConcluidos","escondeMaterial","s","getMaterialIcon","mostraInteracao","renderEdicaoMaterial","renderBotaoVisualizacao","floating","materialItem","renderMaterial","secondary","MaterialItemForm_MaterialItemForm","filtredMaterials","String","renderMaterialPorTipo","QuestionarioList_QuestionarioList","renderQuestionarioList","UnidadeList","handleClickAccordionUnidades","titleProps","newIndex","activeIndex","unidades","initializeUnidade","removerUnidade","salvarUnidade","selecionaUnidade","limparSelecaoUnidade","updateUnidades","_updateUnidades","findByCursoId","_salvarUnidade","_removerUnidade","Accordion","styled","Title","MaterialList_MaterialList","TagaRepository","tag","Certificado","Image","centered","CursoDetalhe","tagSelecionada","initializeTag","tags","updateCurso","avaliacao","updateAvaliacao","backToDashBoard","handleChangeTag","excluiTag","salvarTag","onChangeAvaliacao","console","log","search","match","params","_excluiTag","_salvarTag","updateTags","_updateCurso","getAvaliacao","_updateTags","back","history","_enviarAvaliacao","enviarAvaliacao","Certificado_Certificado","ref","el","componentRef","display","lib_default","max","vertical","UnidadeList_UnidadeList","Input","iconPosition","labelPosition","t","renderAreaAluno","Login","logando","_login","Container","redirectToDashBoard","hidden","disabled","rel","UsuarioDetalhe","groupBy","array","reduce","objectsByKeyValue","detalhesUsuario","inscricoes","dataCadastro","percentual","usuarioNome","usuarioEmail","celled","inc","dados_conclusao","Table","HeaderCell","Body","d","Cell","getPercentual","configure","App","react_router","path","exact","component","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80286298.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport class WebApi {\n\n    static create() {\n        const instance = axios.create({\n            baseURL: this.getUrl(),\n            timeout: 4000\n        });\n\n        return instance\n    }\n\n    static getUrl() {\n        let app = \"incompany\";\n        let host = \"http://localhost\";\n        let appType = \"api\"\n        let versao = \"v1\";\n        return host + \"/\" + app + \"/\" + appType + \"/\" + versao + \"/\"\n    }\n\n}\n","import { WebApi } from './WebApi';\nexport class CategoriaRepository {\n\n    static all() {\n        return WebApi.create().get('categorias')\n    }\n\n    static save(categoria) {\n        return WebApi.create().post('categorias', categoria)\n    }\n\n    static remove(categoria) {\n        return WebApi.create().delete('categorias', { \"data\": categoria })\n    }\n}\n","import React from 'react';\nimport { Form, Button, Header } from 'semantic-ui-react';\n\n\nexport const CategoriaItemForm = ({ categoria,\n    titulo, onClickAction, changeAction }) =>\n    <Form encType=\"multipart/form-data\">\n        <Header>{titulo}</Header>\n        <Form.Group widths=\"16\">\n            <Form.Field>\n                <label>Título</label>\n                <input name='descricao' onChange={changeAction}\n                    placeholder='Título'\n                    value={categoria.descricao} />\n            </Form.Field>\n            <Form.Field >\n                <label>&nbsp;</label>\n                <Button onClick={() => onClickAction('AE')} icon=\"check\" basic></Button>\n                {\n                    titulo.includes('Edição') ?\n                        <Button onClick={() => onClickAction('R')} icon=\"close\" basic></Button> : ''\n                }\n            </Form.Field>\n        </Form.Group>\n    </Form>","import React from 'react';\nimport { Popup } from 'semantic-ui-react';\n\nexport const PopupForm = ({ position, content, trigger, onCloseAction }) => (\n    <Popup wide=\"very\"\n        onClose={onCloseAction}\n        trigger={\n            trigger\n        }\n        content={\n            { content }\n        }\n        on='click'\n        position={position}>\n    </Popup>\n)","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\n\nexport const Mensagem = ({ msg, icon }) => (\n    <span><Icon name={icon} />{msg}</span>\n)\n","import React from 'react';\nimport { List } from 'semantic-ui-react';\nimport { Mensagem } from './Mensagem';\n\nexport const ValidationErrors = ({ erros }) => (\n    <List size=\"small\">\n        {\n            Array.isArray(erros) ?\n                erros.map((erro, index) => (\n                    <List.Item key={'erro-validacao-usuario-' + index}><Mensagem icon=\"warning\" msg={erro}></Mensagem></List.Item>\n\n                )) : <List.Item key={'erro-validacao-usuario-1'}><Mensagem icon=\"warning\" msg={erros}></Mensagem></List.Item>\n        }\n    </List>\n)\n","import React from 'react';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { toast } from 'react-toastify';\nimport { ValidationErrors } from '../ValidationErrors';\nimport { Mensagem } from '../Mensagem';\n\nexport class Notificacao {\n\n    static gerar(resultado) {\n        const msgs = resultado.data.msg;\n        const elementMsg = resultado.data.flag ? (<Mensagem icon='check' msg={msgs} />) : (<ValidationErrors erros={msgs} />)\n        const msgType = resultado.data.flag ? toast.TYPE.INFO : toast.TYPE.WARNING;\n        toast(elementMsg, { type: msgType });\n    }\n\n}\n\n","import React, { Component } from 'react';\nimport { Segment, List, Label, Icon, Header, Dimmer, Button, Divider } from 'semantic-ui-react'\nimport { CategoriaRepository } from '../../api/CategoriaRepository';\nimport { CategoriaItemForm } from '../categoria/CategoriaItemForm';\nimport { PopupForm } from '../PopupForm';\nimport { Notificacao } from '../notificacao/Notificacao';\n\nexport class CategoriaList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            categorias: [],\n            categoriaSelecionada: this.initializeCategoria(),\n            updateCategorias: 1,\n            carregarCategorias: false\n\n        }\n        this.handleChangeDescricaoCategoria = this.handleChangeDescricaoCategoria.bind(this);\n        this.handleClickCategoriaItem = this.handleClickCategoriaItem.bind(this);\n        this.selectCategoria = this.selectCategoria.bind(this);\n        this.limparSelecaoCategoria = this.limparSelecaoCategoria.bind(this);\n    }\n\n    async componentDidMount() {\n        this.updateCategorias()\n        this.setState({ categoriaSelecionada: this.initializeCategoria() })\n    }\n\n    async updateCategorias() {\n        /*  this.setState({ carregarCategorias: true }) */\n\n        const categorias = await CategoriaRepository.all()\n        this.setState({ updateCategorias: this.state.updateCategorias + 1 })\n        this.setState({ categorias: categorias.data })\n\n        // this.setState({ carregarCategorias: false })\n    }\n\n    initializeCategoria() {\n        return { id: 0, descricao: '' }\n    }\n\n    limparSelecaoCategoria() {\n        this.setState({ categoriaSelecionada: this.initializeCategoria() })\n    }\n\n    selectCategoria(categoria) {\n        this.setState({ categoriaSelecionada: categoria })\n    }\n\n    handleChangeDescricaoCategoria(e, obj) {\n        const element = obj !== undefined ? obj : e.target\n        const categoria = this.state.categoriaSelecionada\n        categoria[element.name] = element.value\n        this.setState({ categoriaSelecionada: categoria })\n    }\n\n    handleClickCategoriaItem(acao) {\n        if (acao === \"AE\") {\n            this.salvarCategoria()\n        } else\n            if (acao === \"R\") {\n                this.removerCategoria()\n            }\n    }\n\n    setStatusRequisicao(resultado) {\n        Notificacao.gerar(resultado)\n        if (resultado.data.flag) {\n            this.setState({ categoriaSelecionada: this.initializeCategoria() })\n            this.updateCategorias()\n        }\n    }\n\n    async salvarCategoria() {\n        this.setStatusRequisicao(await CategoriaRepository.save(this.state.categoriaSelecionada));\n    }\n\n    async removerCategoria() {\n        this.setStatusRequisicao(await CategoriaRepository.remove(this.state.categoriaSelecionada));\n    }\n\n    render() {\n        return (\n            <Dimmer.Dimmable blurring\n                as={Segment}\n                key={this.state.updateCategorias}\n                active={this.state.carregarCategorias}>\n                <PopupForm\n                    trigger={\n                        <Button basic\n                            onClick={this.limparSelecaoCategoria}\n                            className=\"pointer\"\n                            as=\"a\"\n                            floated=\"left\"\n                            size=\"mini\"> <Icon name=\"add\"></Icon>Adicionar\n                            </Button>\n                    }\n                    position=\"left center\"\n                    content={\n                        <CategoriaItemForm\n                            titulo={\"Inclusão de Categoria de Curso\"}\n                            categoria={this.state.categoriaSelecionada}\n                            changeAction={this.handleChangeDescricaoCategoria}\n                            onClickAction={this.handleClickCategoriaItem}>\n                        </CategoriaItemForm>}\n                ></PopupForm>\n\n                <Header className=\"header-listagem\" textAlign=\"center\" size=\"tiny\">Categorias de Cursos  </Header>\n                <List horizontal animated verticalAlign='middle'>\n                    {this.state.categorias.map(c => (\n                        <List.Item key={c.id} >\n                            <PopupForm\n                                trigger={\n                                    <Button onClick={() => this.selectCategoria(c)} className=\"botao-item-sistema\" basic>\n                                        <List.Content>\n                                            <Segment compact basic>\n                                                <Icon name='grid layout' size='big' />\n                                                <List.Header className=\"nome-list\">{c.descricao}</List.Header>\n                                                <Divider></Divider>\n                                                <Label size=\"mini\" basic>\n                                                    <Icon name='cube' /> {c.qtdCursos}\n                                                </Label>\n                                            </Segment>\n                                        </List.Content>\n                                    </Button>\n                                }\n                                position=\"left center\"\n                                content={\n                                    <CategoriaItemForm\n                                        titulo={\"Edição de Categoria de Curso\"}\n                                        categoria={this.state.categoriaSelecionada}\n                                        changeAction={this.handleChangeDescricaoCategoria}\n                                        onClickAction={this.handleClickCategoriaItem}>\n                                    </CategoriaItemForm>}\n                            ></PopupForm>\n                        </List.Item>\n                    ))}\n                </List>\n                <Dimmer active={this.state.carregarCategorias}>\n                    <Header as='h2' inverted>\n                        <Icon loading name='circle notch' />\n                    </Header>\n                </Dimmer>\n            </Dimmer.Dimmable>\n        )\n    }\n}","import { WebApi } from './WebApi';\nimport { enc } from 'crypto-js';\nimport sha256 from 'crypto-js/sha256'\nexport class UsuarioRepository {\n    static all() {\n        return WebApi.create().get('usuarios')\n    }\n\n    static save(usuario) {\n        return WebApi.create().post('usuarios', usuario)\n    }\n\n    static findById(usuarioId) {\n        return WebApi.create().get(`usuarios/${usuarioId}`)\n    }\n\n    static remove(usuario) {\n        return WebApi.create().delete('usuarios', { \"data\": usuario })\n    }\n\n    static login(usuario) {\n        const login = {\n            email: usuario.email,\n            _: sha256(usuario.senha).toString(enc.Hex)\n        }\n        return WebApi.create().post('login', login)\n    }\n}\n","import React from 'react';\nimport { Form, Button, Header, Dropdown, Divider, Icon } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\n\n\nexport const UsuarioItemForm = ({ usuario,\n    titulo, onClickAction, changeAction, tiposUsuariosPossiveis }) =>\n    <Form encType=\"multipart/form-data\">\n        <Header>{titulo}</Header>\n        <Form.Field>\n            <label>Nome</label>\n            <input name='nome' onChange={changeAction}\n                placeholder='Título'\n                value={usuario.nome} />\n        </Form.Field>\n        <Form.Field>\n            <label>E-mail</label>\n            <input name='email' onChange={changeAction}\n                placeholder='E-mail'\n                value={usuario.email} />\n        </Form.Field>\n        <Form.Field>\n            <label>Senha</label>\n            <input name='senha' type=\"password\" onChange={changeAction}\n                placeholder='Senha'\n                value={usuario.senha} />\n        </Form.Field>\n        <Form.Field>\n            <label>Tipo</label>\n            <Dropdown name='tipo' value={usuario.tipo} clearable onChange={changeAction} options={tiposUsuariosPossiveis} selection />\n        </Form.Field>\n        <label>&nbsp;</label>\n        <Button floated=\"right\" onClick={() => onClickAction('AE')} icon=\"check\" basic></Button>\n        <label>&nbsp;</label>\n        {\n            titulo.includes('Edição') ?\n                <Button onClick={() => onClickAction('R')} icon=\"close\" basic></Button> : ''\n        }\n      \n        {\n            titulo.includes('Edição') && usuario.tipo === 'U' ?\n                <div><Divider></Divider><Link to={`usuarios/${usuario.id}`}><Button attached=\"bottom\" size=\"mini\" basic><Icon name=\"chart bar\"></Icon> Relatório</Button></Link></div> : ''\n        }\n    </Form>","import React, { Component } from 'react';\nimport { Segment, List, Label, Icon, Header, Dimmer, Button, Divider, Popup } from 'semantic-ui-react'\nimport { UsuarioRepository } from '../../api/UsuarioRepository';\nimport { PopupForm } from '../PopupForm';\nimport { UsuarioItemForm } from './UsuarioItemForm';\nimport { Notificacao } from '../notificacao/Notificacao';\n\nexport class UsuarioList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            usuarios: [],\n            usuarioSelecionado: this.initializeUsuario(),\n            updateUsuarios: 1,\n            carregarUsuarios: false\n        }\n        this.handleChangeUsuario = this.handleChangeUsuario.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.selectUsuario = this.selectUsuario.bind(this);\n        this.limparSelecao = this.limparSelecao.bind(this);\n        this.handleOncloseChange = this.handleOncloseChange.bind(this);\n    }\n\n    async componentDidMount() {\n        this.updateUsuarios()\n        this.setState({ usuarioSelecionado: this.initializeUsuario() })\n    }\n\n    async updateUsuarios() {\n\n        const usuarios = await UsuarioRepository.all()\n        this.setState({ updateUsuarios: this.state.updateUsuarios + 1 })\n        this.setState({ usuarios: usuarios.data })\n\n    }\n\n    initializeUsuario() {\n        return { id: 0, nome: '', email: '', senha: '', tipo: '' }\n    }\n\n    limparSelecao() {\n        this.setState({ usuarioSelecionado: this.initializeUsuario() })\n    }\n\n    selectUsuario(usuario) {\n        this.setState({ usuarioSelecionado: usuario })\n    }\n\n    handleChangeUsuario(e, obj) {\n        const element = obj !== undefined ? obj : e.target\n        const usuario = this.state.usuarioSelecionado\n        usuario[element.name] = element.value\n        this.setState({ usuarioSelecionado: usuario })\n    }\n\n    handleOncloseChange(e, obj) {\n        this.updateUsuarios()\n    }\n\n    handleClick(acao) {\n        if (acao === \"AE\") {\n            this.salvarUsuario()\n        } else\n            if (acao === \"R\") {\n                this.removerUsuario()\n            }\n    }\n\n    setStatusRequisicao(resultado) {\n        Notificacao.gerar(resultado)\n        if (resultado.data.flag) {\n            this.setState({ categoriaSelecionada: this.initializeUsuario() })\n            this.updateUsuarios()\n        }\n    }\n\n    async salvarUsuario() {\n        this.setStatusRequisicao(await UsuarioRepository.save(this.state.usuarioSelecionado));\n    }\n\n    async removerUsuario() {\n        this.setStatusRequisicao(await UsuarioRepository.remove(this.state.usuarioSelecionado));\n    }\n\n    getTiposUsuariosPossiveis() {\n        return [\n            { key: 1, text: 'Administrador', value: 'A' },\n            { key: 2, text: 'Usuário', value: 'U' }\n        ]\n    }\n\n    render() {\n        return (\n            <Dimmer.Dimmable blurring\n                as={Segment}\n                key={this.state.updateUsuarios}\n                active={this.state.carregarUsuarios}>\n                <PopupForm\n                    onCloseAction={this.handleOncloseChange}\n                    trigger={\n                        <Button basic\n                            onClick={this.limparSelecao}\n                            className=\"pointer\"\n                            as=\"a\"\n                            floated=\"left\"\n                            size=\"mini\"> <Icon name=\"add\"></Icon>Adicionar\n                            </Button>\n                    }\n                    position=\"left center\"\n                    content={\n                        <UsuarioItemForm\n                            titulo={\"Inclusão de Usuário\"}\n                            usuario={this.state.usuarioSelecionado}\n                            changeAction={this.handleChangeUsuario}\n                            onClickAction={this.handleClick}\n                            tiposUsuariosPossiveis={this.getTiposUsuariosPossiveis()}>\n                        </UsuarioItemForm>}\n                ></PopupForm>\n\n                <Header className=\"header-listagem\" textAlign=\"center\" size=\"tiny\">Usuários</Header>\n                <List horizontal animated verticalAlign='middle'>\n                    {this.state.usuarios.map(u => (\n                        <List.Item key={u.id} >\n                            <PopupForm\n                                onCloseAction={this.handleOncloseChange}\n                                trigger={\n                                    <div>\n                                        <Button onClick={() => this.selectUsuario(u)} className=\"botao-item-sistema\" basic>\n                                            <List.Content>\n                                                <Segment compact basic>\n\n                                                    <Icon name='user' size='big' />\n                                                    <List.Header className=\"nome-list\">{u.nome}</List.Header>\n                                                    <Divider></Divider>\n                                                    <Label size=\"mini\" basic>\n                                                        <Icon name='mail' /> {u.email}\n                                                    </Label>\n                                                    {\n                                                        u.tipo === 'A' ?\n                                                            <Label size=\"mini\" color='red' basic>ADM</Label> :\n                                                            (\n                                                                <Label size=\"mini\" color='blue' basic>Aluno</Label>\n                                                            )\n                                                    }\n\n\n                                                </Segment>\n\n\n                                            </List.Content>\n                                        </Button>\n                                    </div>\n                                }\n                                position=\"left center\"\n                                content={\n                                    <UsuarioItemForm\n                                        titulo={\"Edição de Usuário\"}\n                                        usuario={this.state.usuarioSelecionado}\n                                        changeAction={this.handleChangeUsuario}\n                                        onClickAction={this.handleClick}\n                                        tiposUsuariosPossiveis={this.getTiposUsuariosPossiveis()}>\n                                    </UsuarioItemForm>}\n                            ></PopupForm>\n                        </List.Item>\n                    ))}\n                </List>\n                <Dimmer active={this.state.carregarUsuarios}>\n                    <Header as='h2' inverted>\n                        <Icon loading name='circle notch' />\n                    </Header>\n                </Dimmer>\n            </Dimmer.Dimmable>\n        )\n    }\n}","import questoes from './questoes-data.json'\n\nexport class Auth {\n    static save(resultado) {\n        localStorage.setItem('auth', JSON.stringify(resultado.data.obj))\n    }\n\n    static get() {\n        const auth = JSON.parse(localStorage.getItem('auth'))\n        return auth\n    }\n\n    static clear() {\n        localStorage.clear()\n        window.location.href = '/login'\n    }\n\n    static isPerfilAdm() {\n        if (this.get() === null)\n            this.clear()\n\n        return this.get().tipo === \"A\"\n    }\n\n}\n","import React, { Component } from 'react';\nimport { Menu, Dropdown } from 'semantic-ui-react';\nimport { Auth } from '../api/Auth';\n\nexport class BarraTopo extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            auth: {\n                nome: ''\n            }\n        }\n    }\n\n    async componentDidMount() {\n        this.setState({ auth: this.props.auth })\n    }\n\n    render() {\n        return Auth.get() !== null ? (\n            <Menu stackable>\n                <Menu.Item>\n                    <img src='/logo.png' alt='logo incompany' />\n                </Menu.Item>\n                <Menu.Menu position='right'>\n                    <Dropdown item text={Auth.get().nome}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item onClick={Auth.clear}>Sair</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Menu>\n            </Menu>) : ''\n    }\n}\n","import { WebApi } from './WebApi';\nimport { Auth } from './Auth';\nexport class CursoRepository {\n\n    static all() {\n        return WebApi.create().get('cursos')\n    }\n\n    static save(curso) {\n        return WebApi.create().post('cursos', curso)\n    }\n\n    static isConcluido(curso) {\n        return WebApi.create().post('cursos/is_concluido', { curso_id: curso, usuario_id: Auth.get().id })\n    }\n\n    static getAvaliacao(curso) {\n        return WebApi.create().post('cursos/get_avaliacao', { curso_id: curso, usuario_id: Auth.get().id })\n    }\n\n    static enviarAvaliacao(curso, comentario, nota) {\n        return WebApi.create().post('cursos/avaliacao', {\n            curso_id: curso,\n            comentario: comentario,\n            nota: nota,\n            usuario_id: Auth.get().id\n        })\n    }\n\n    static inscrever(cursoId, usuarioId) {\n        return WebApi.create().post('cursos/inscrever', { usuario_id: usuarioId, curso_id: cursoId })\n    }\n\n    static findDisponiveis(usuarioId) {\n        return WebApi.create().get(`cursos/disponiveis/usuario/${usuarioId}`)\n    }\n\n    static findByIncricaoUsuario(usuarioId) {\n        return WebApi.create().get(`cursos/usuario/${usuarioId}`)\n    }\n\n    static remove(curso) {\n        return WebApi.create().delete('cursos', { \"data\": curso })\n    }\n\n    static findById(id) {\n        return WebApi.create().get(`cursos/${id}`)\n    }\n}\n","import React, { Component } from 'react';\nimport { CursoRepository } from '../../api/CursoRepository'\nimport { Segment, List, Icon, Header, Button, Divider, Label, Form, Dropdown } from 'semantic-ui-react'\nimport { PopupForm } from './../PopupForm'\nimport 'react-toastify/dist/ReactToastify.css';\nimport { CategoriaRepository } from '../../api/CategoriaRepository';\nimport { Notificacao } from '../notificacao/Notificacao';\nimport { Auth } from '../../api/Auth';\nimport { Link } from \"react-router-dom\";\n\nexport class CursoList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cursos: [],\n            cursoSelecionado: this.initializeCurso(),\n            updateCursos: 1,\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n        this.limparSelecao = this.limparSelecao.bind(this)\n        this.handleOncloseChange = this.handleOncloseChange.bind(this)\n    }\n\n    async componentDidMount() {\n        this.updateCursos()\n        this.updateCategorias()\n    }\n\n    async updateCategorias(){\n        const categorias = await CategoriaRepository.all();\n        this.setState({ categorias: this.buildDropdownItensCategoria(categorias.data) })\n    }\n\n    buildDropdownItensCategoria(categorias) {\n        let categoriasItens = []\n        categorias.map(categoria => {\n            return categoriasItens.push({ key: categoria.id, text: categoria.descricao, value: categoria.id })\n        })\n        return categoriasItens\n    }\n\n    initializeCurso() {\n        return {\n            id: 0,\n            titulo: '',\n            nome_tutor: '',\n            categoria_id: 0,\n            usuario_id: 0\n        }\n    }\n\n    handleChange(e, obj) {\n        const element = obj !== undefined ? obj : e.target\n        const curso = this.state.cursoSelecionado\n        curso[element.name] = element.value\n        curso.usuario_id = Auth.get().id\n        this.setState({ cursoSelecionado: curso })\n    }\n\n    handleOncloseChange(e, obj) {\n        this.updateCursos()\n    }\n\n    async updateCursos() {\n        /*  this.setState({ carregarCategorias: true }) */\n\n        const cursos = await CursoRepository.all()\n        this.setState({ updateCursos: this.state.updateCursos + 1 })\n        this.setState({ cursos: cursos.data })\n\n        // this.setState({ carregarCategorias: false })\n    }\n\n    setStatusRequisicao(resultado) {\n        Notificacao.gerar(resultado)\n        if (resultado.data.flag) {\n            this.setState({ cursoSelecionado: this.initializeCurso() })\n            this.updateCursos()\n        }\n    }\n\n    selectCurso(curso) {\n        this.setState({ cursoSelecionado: curso })\n    }\n\n    async salvarCurso() {\n        this.setStatusRequisicao(await CursoRepository.save(this.state.cursoSelecionado));\n    }\n\n    async removerCurso() {\n        this.setStatusRequisicao(await CursoRepository.remove(this.state.cursoSelecionado));\n    }\n\n    limparSelecao() {\n        this.setState({ cursoSelecionado: this.initializeCurso() })\n        this.updateCategorias()\n    }\n\n    buildCursoForm(titulo) {\n        return (\n            <Form encType=\"multipart/form-data\">\n                <Header>{titulo}</Header>\n                <Form.Field>\n                    <label>Título</label>\n                    <input placeholder='Título'\n                        name=\"titulo\"\n                        type=\"text\"\n                        value={this.state.cursoSelecionado.titulo}\n                        onChange={this.handleChange} />\n                </Form.Field>\n                <Form.Field>\n                    <label>Categoria</label>\n                    <Dropdown selection name=\"categoria_id\" onChange={this.handleChange} value={this.state.cursoSelecionado.categoria_id} options={this.state.categorias} />\n                </Form.Field>\n                <Form.Field>\n                    <label>Nome Tutor</label>\n                    <input placeholder='Nome do Tutor'\n                        name=\"nome_tutor\"\n                        type=\"text\"\n                        onChange={this.handleChange}\n                        value={this.state.cursoSelecionado.nome_tutor} />\n                </Form.Field>\n                <label>&nbsp;</label>\n                <Button floated=\"right\" onClick={() => this.handleClick('AE')} icon=\"check\" basic></Button>\n                <label>&nbsp;</label>\n                {\n                    titulo.includes('Edição') ?\n                        <Button.Group basic>\n                            <Button onClick={() => this.handleClick('R')} icon=\"close\" ></Button>\n                            <Link to={`/cursos/${this.state.cursoSelecionado.id}`}>\n                                <Button onClick={() => this.handleClick('E')} icon=\"pencil\" ></Button>\n                            </Link>\n                        </Button.Group> : ''\n                }\n            </Form>\n        )\n    }\n\n    handleClick(acao) {\n        if (acao === \"AE\") {\n            this.salvarCurso()\n        } else\n            if (acao === \"R\") {\n                this.removerCurso()\n            }\n    }\n\n    render() {\n        return (\n            <div>\n                <Segment key={this.state.updateCursos}>\n                    <PopupForm\n                        onCloseAction={this.handleOncloseChange}\n                        trigger={\n                            <Button basic\n                                onClick={this.limparSelecao}\n                                className=\"pointer\"\n                                as=\"a\"\n                                floated=\"left\"\n                                size=\"mini\"> <Icon name=\"add\"></Icon>Adicionar\n                            </Button>\n                        }\n                        position=\"left center\"\n                        content={this.buildCursoForm(\"Inclusão de Curso\")}\n                    ></PopupForm>\n                    <Header className=\"header-listagem\" textAlign=\"center\" size=\"tiny\">Cursos</Header>\n                    <List horizontal animated verticalAlign='middle'>\n                        {this.state.cursos.map(c => (\n                            <List.Item key={c.id} >\n                                <PopupForm\n                                    trigger={\n                                        <Button onClick={() => this.selectCurso(c)} className=\"botao-item-sistema\" basic>\n                                            <List.Content>\n                                                <Segment compact basic>\n                                                    <Icon name='cube' size='big' />\n                                                    <List.Header className=\"nome-list\">{c.titulo}</List.Header>\n                                                    <Divider></Divider>\n                                                    <Label size=\"mini\" basic>\n                                                        <Icon name='cube' /> {c.nome_tutor}\n                                                    </Label>\n                                                </Segment>\n                                            </List.Content>\n                                        </Button>\n                                    }\n                                    position=\"left center\"\n                                    content={this.buildCursoForm(\"Edição de Curso\")}\n                                ></PopupForm>\n                            </List.Item>\n                        ))}\n                    </List>\n                </Segment>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Segment, Header, List, Icon, Divider, Label, Button } from 'semantic-ui-react'\nimport { Auth } from '../../api/Auth';\nimport { CursoRepository } from '../../api/CursoRepository';\nimport { Notificacao } from '../notificacao/Notificacao';\nimport { Link } from \"react-router-dom\";\n\nexport class Aluno extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            meusCursos: [],\n            cursosDisoniveis: [],\n            updateCursos: 1\n        }\n\n        this.inscricao = this.inscricao.bind(this)\n    }\n\n    setStatusRequisicao(resultado) {\n        Notificacao.gerar(resultado)\n        if (resultado.data.flag) {\n            this.updateCursos()\n        }\n    }\n\n    async updateCursos() {\n        const usuarioId = Auth.get().id\n        const meusCursos = await CursoRepository.findByIncricaoUsuario(usuarioId)\n        const cursosDisoniveis = await CursoRepository.findDisponiveis(usuarioId)\n        this.setState({ meusCursos: meusCursos.data })\n        this.setState({ cursosDisoniveis: cursosDisoniveis.data })\n        this.setState({ updateCursos: this.state.updateCursos + 1 })\n    }\n\n    async componentDidMount() {\n        this.updateCursos()\n    }\n\n    async inscricao(cursoId) {\n        this.setStatusRequisicao(await CursoRepository.inscrever(cursoId, Auth.get().id))\n    }\n\n    render() {\n        return (\n            <Segment key={'cursos-aluno-' + this.state.updateCursos}>\n                <Segment>\n                    <Header>Meus Cursos</Header>\n                    <List horizontal animated selection>\n                        {\n                            this.state.meusCursos.map(c => (\n                                <List.Item>\n\n                                    <Segment>\n                                        <Icon name='cube' size='big' />\n                                        <List.Header className=\"nome-list\">{c.titulo}</List.Header>\n                                        <Divider></Divider>\n                                        <Label size=\"mini\" basic>\n                                            <Icon name='cube' /> {c.nome_tutor}\n                                        </Label>\n                                    </Segment>\n                                    <Link to={`cursos/${c.id}`}>\n                                        <Button  size=\"mini\" basic>Ir para o curso</Button>\n                                    </Link>\n\n                                </List.Item>\n                            ))\n                        }\n                    </List>\n                </Segment>\n                <Segment>\n                    <Header>Cursos Disponíveis</Header>\n                    <List selection horizontal>\n                        {\n\n                            this.state.cursosDisoniveis.map(c => (\n                                <List.Item>\n\n                                    <Segment>\n                                        <Icon name='cube' size='big' />\n                                        <List.Header className=\"nome-list\">{c.titulo}</List.Header>\n                                        <Divider></Divider>\n                                        <Label size=\"mini\" basic>\n                                            <Icon name='cube' /> {c.nome_tutor}\n                                        </Label>\n                                    </Segment>\n                                    <Button onClick={() => this.inscricao(c.id)} size=\"mini\" basic>Increver</Button>\n                                </List.Item>\n                            ))\n                        }\n                    </List>\n                </Segment>\n            </Segment>\n        )\n    }\n}","import React, { Component } from 'react';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { CategoriaList } from './categoria/CategoriaList';\nimport { UsuarioList } from './usuario/UsuarioList';\nimport { BarraTopo } from './BarraTopo';\nimport { CursoList } from './curso/CursoList';\nimport { Auth } from '../api/Auth';\nimport { Segment } from 'semantic-ui-react';\nimport { Aluno } from './aluno/Aluno';\n\nexport class Dashboard extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    sair() {\n        Auth.clear()\n    }\n\n    async componentWillMount() {\n        if (Auth.get() === null)\n            Auth.clear()\n    }\n\n    renderDashboardContent() {\n        return (\n            <div>\n                <CursoList></CursoList>\n                <UsuarioList></UsuarioList>\n                <CategoriaList></CategoriaList>\n            </div>)\n    }\n\n    renderAlunoContent() {\n        return (\n            <div>\n                <Aluno></Aluno>\n            </div>)\n    }\n\n    renderParaUsuario() {\n        if (Auth.isPerfilAdm())\n            return this.renderDashboardContent();\n        else\n            return this.renderAlunoContent();\n    }\n\n    render() {\n        return (\n            <div>\n                <BarraTopo></BarraTopo>\n                <Segment>{this.renderParaUsuario()}</Segment>\n            </div>\n        )\n    }\n}","import { WebApi } from './WebApi';\nexport class UnidadeRepository {\n\n    static all() {\n        return WebApi.create().get('unidades')\n    }\n\n    static findByCursoId(cursoId) {\n        return WebApi.create().get(`unidades/curso/${cursoId}`)\n    }\n\n    static findById(unidadeId) {\n        return WebApi.create().get(`unidades/${unidadeId}`)\n    }\n\n    static save(unidade) {\n        return WebApi.create().post('unidades', unidade)\n    }\n\n    static remove(unidade) {\n        return WebApi.create().delete('unidades', { \"data\": unidade })\n    }\n}\n","import React from 'react';\nimport { Form, Button, Header, Popup, Icon, Dropdown, Checkbox } from 'semantic-ui-react';\n\n\nexport const MaterialItemForm = ({ material, icon, titulo, position,\n    buttonFloated, buttonTitle, handleChange, handleClick, seleciona, limpa }) =>\n    <Popup wide=\"very\"\n        trigger={\n            buttonTitle ?\n                <Button onClick={() => limpa()} floated={buttonFloated} size=\"mini\" basic><Icon name={icon}></Icon>{buttonTitle}</Button>\n                : <Button onClick={() => seleciona(material)} floated={buttonFloated} size=\"mini\" icon={icon} basic></Button>\n        }\n        content={\n            <Form>\n                <Header>{titulo}</Header>\n                <Form.Field >\n                    <label>Tipo Material</label>\n                    <Dropdown selection\n                        onChange={handleChange}\n                        name='tipo'\n                        value={material.tipo}\n                        options={[\n                            { key: \"tipo-mat-1\", text: \"Documento\", value: \"D\", icon: \"file outline\" },\n                            { key: \"tipo-mat-2\", text: \"Vídeo\", value: \"V\", icon: \"play\" },\n                            { key: \"tipo-mat-3\", text: \"Questionário\", value: \"Q\", icon: \"question circle outline\" }\n                        ]} />\n                </Form.Field>\n                <Form.Field>\n                    <label>Título</label>\n                    <input\n                        type=\"text\"\n                        placeholder='Título'\n                        value={material.titulo}\n                        name=\"titulo\"\n                        onChange={handleChange} />\n                </Form.Field>\n                {material.tipo !== 'Q' ?\n                    (<Form.Field>\n                        <label>Link</label>\n                        <input\n                            type=\"text\"\n                            placeholder='Link'\n                            value={material.url}\n                            name=\"url\"\n                            onChange={handleChange} />\n                    </Form.Field>) :\n                    <Checkbox name=\"final\" checked={material.final} onChange={handleChange} size=\"small\" label='Mostrar ao final da unidade' />\n                }\n                <Form.Field >\n                    <label>&nbsp;</label>\n                    <Button onClick={() => handleClick(\"SM\")} floated=\"right\" icon=\"check\" basic></Button>\n                </Form.Field>\n            </Form>\n        }\n        on='click'\n        position={position}\n    />","import { WebApi } from './WebApi';\nimport { Auth } from './Auth';\nexport class MaterialRepository {\n\n    static all() {\n        return WebApi.create().get('materiais')\n    }\n\n    static save(material) {\n        return WebApi.create().post('materiais', material)\n    }\n\n    static interacao(materialId, usuarioId, cursoId) {\n        return WebApi.create().post('materiais/interacao', {\n            \"material_id\": materialId,\n            \"usuario_id\": usuarioId,\n            \"curso_id\": cursoId\n        })\n    }\n\n    static possuiInteracao(usuarioId, cursoId, unidadeId) {\n        return WebApi.create().post('materiais/possui_interacao', {\n            \"usuario_id\": usuarioId,\n            \"curso_id\": cursoId,\n            \"unidade_id\" : unidadeId\n        })\n    }\n\n    static findByUnidadeId(unidadeId) {\n        return WebApi.create().get(`materiais/unidade/${unidadeId}?usuario_id=${Auth.get().id}`)\n    }\n\n    static findById(materialId) {\n        return WebApi.create().get(`materiais/${materialId}`)\n    }\n\n    static remove(material) {\n        return WebApi.create().delete('materiais', { \"data\": material })\n    }\n}\n","import { WebApi } from './WebApi';\nexport class QuestionarioRepository {\n\n    static all() {\n        return WebApi.create().get('questionarios')\n    }\n\n    static save(questao) {\n        return WebApi.create().post('questionarios', questao)\n    }\n\n    static nova(material) {\n        return WebApi.create().post('questionarios/nova', material)\n    }\n\n    static enviar(questoes) {\n        return WebApi.create().post('questionarios/responder', questoes)\n    }\n\n    static remove(questao) {\n        return WebApi.create().delete('questionarios', { \"data\": questao })\n    }\n\n    static findByMaterialId(materialId) {\n        return WebApi.create().get(`questionarios/material/${materialId}`)\n    }\n}\n","import { WebApi } from './WebApi';\nexport class AlternativaRepository {\n\n    static all() {\n        return WebApi.create().get('alternativas')\n    }\n\n    static save(curso) {\n        return WebApi.create().post('alternativas', curso)\n    }\n\n    static remove(curso) {\n        return WebApi.create().delete('alternativas', { \"data\": curso })\n    }\n\n    static setAlternativaCorreta(questaoId, alternativaId) {\n        return WebApi.create().post('alternativas/atualizar',\n            { \"data\": { questaoId: questaoId, alternativaId: alternativaId } })\n    }\n\n    static findByQuestaoId(questaoId) {\n        return WebApi.create().get(`alternativas/questao/${questaoId}`)\n    }\n}\n","import React, { Component } from 'react';\nimport { Checkbox, Form, Segment, Button, Divider, Icon, Header, Modal } from 'semantic-ui-react';\nimport { AlternativaRepository } from '../../api/AlternativaRepository';\nimport { Notificacao } from '../notificacao/Notificacao';\nimport { Auth } from '../../api/Auth';\n\nexport class AlternativaList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            alternativas: [],\n            alternativaSelecionada: this.initializeAlternativa(),\n            updateAlternativas: 1,\n            textoNovaAlternativa: \"\"\n        }\n\n        this.handleClick = this.handleClick.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleChangeRadios = this.handleChangeRadios.bind(this)\n        this.removerAlternativa = this.removerAlternativa.bind(this)\n        this.alteraAlternativaCorreta = this.alteraAlternativaCorreta.bind(this)\n    }\n\n    handleChange(e) {\n        this.setState({ textoNovaAlternativa: e.target.value })\n    }\n\n    handleChangeRadios(e, obj) {\n        const idAlternativa = obj.value;\n        if (Auth.isPerfilAdm())\n            this.alteraAlternativaCorreta(this.props.questao.id, idAlternativa)\n        else {\n            const a = this.state.alternativas.find(a => {\n                return a.id === idAlternativa\n            })\n            this.setState({ alternativaSelecionada: a })\n            this.props.guardarResposta(a)\n        }\n\n    }\n\n    async alteraAlternativaCorreta(questaoId, alternativaId) {\n        this.setStatusRequisicao(await AlternativaRepository.setAlternativaCorreta(questaoId, alternativaId));\n    }\n\n    initializeAlternativa() {\n        return {\n            id: 0,\n            texto: '',\n            questao_id: this.props.questao.id,\n            ordem: 0,\n            correta: false\n        }\n    }\n\n    async updateAlternativas() {\n        const resultado = await AlternativaRepository.findByQuestaoId(this.props.questao.id)\n\n        let alternativas = []\n        resultado.data.map(a => {\n            a.correta = a.correta === \"1\"\n            alternativas.push(a)\n            if (a.correta && Auth.isPerfilAdm())\n                this.setState({ alternativaSelecionada: a })\n        })\n\n        this.setState({ alternativas: alternativas })\n        this.setState({ updateAlternativas: this.state.updateAlternativas + 1 })\n    }\n\n    async componentDidMount() {\n        this.updateAlternativas()\n    }\n\n    setAlternativaSelecionada(id) {\n        this.setState({ alternativaSelecionada: this.props.questao.alternativas.find(q => q.id === parseInt(id)) })\n    }\n\n    async salvarAlternativa() {\n        let alternativa = this.initializeAlternativa()\n        alternativa.texto = this.state.textoNovaAlternativa;\n        this.setStatusRequisicao(await AlternativaRepository.save(alternativa));\n        this.setState({ textoNovaAlternativa: \"\" })\n    }\n\n    setStatusRequisicao(resultado) {\n        Notificacao.gerar(resultado)\n        if (resultado.data.flag) {\n            this.setState({ alternativaSelecionada: this.initializeAlternativa() })\n            this.updateAlternativas()\n            //this.props.update()\n        }\n    }\n\n    handleClick(acao) {\n        if (acao === \"SA\") {\n            this.salvarAlternativa()\n        }\n    }\n\n    async removerAlternativa(alternativa) {\n        this.setStatusRequisicao(await AlternativaRepository.remove(alternativa));\n    }\n\n    render() {\n        return (\n            <Segment key={this.state.updateAlternativas} className=\"bottom-extended\">\n                {Auth.isPerfilAdm() ? (<Header>Alternativas</Header>) : ''}\n                {this.state.alternativas.map(a => (\n                    <div>\n                        <Segment className=\"bottom-extended\">\n                            <Checkbox\n                                radio\n                                label={a.texto}\n                                name=\"correta\"\n                                value={a.id}\n                                checked={this.state.alternativaSelecionada.id === a.id}\n                                onChange={this.handleChangeRadios}\n                            />\n                            {Auth.isPerfilAdm() ? (<Button onClick={() => this.removerAlternativa(a)} floated=\"right\" icon=\"close\" basic size=\"mini\"></Button>) : ''}\n                        </Segment>\n                    </div>\n                ))}\n                {Auth.isPerfilAdm() ? (\n                    <div>\n                        <input\n                            name=\"texto\"\n                            placeholder=\"Descrição da nova alternativa\"\n                            size=\"mini\"\n                            value={this.state.textoNovaAlternativa}\n                            onChange={this.handleChange}\n                        />\n                        <Button onClick={() => this.handleClick(\"SA\")} floated=\"right\" basic size=\"mini\"><Icon name=\"add\"></Icon>Adicionar Alternativa</Button></div>) : ''}\n            </Segment >\n\n        )\n    }\n}","import React, { Component } from 'react';\nimport { QuestionarioRepository } from '../../api/QuestionarioRepository';\nimport { Modal, List, Button, Icon, Segment, Label, Form, Divider, Breadcrumb, Header, TextArea, Grid } from 'semantic-ui-react';\nimport { MaterialRepository } from '../../api/MaterialRepository';\nimport { Notificacao } from '../notificacao/Notificacao';\nimport { AlternativaList } from '../alternativa/AlternativaList';\nimport { Link } from \"react-router-dom\";\nimport { Auth } from '../../api/Auth';\nimport { CursoRepository } from '../../api/CursoRepository';\n\nexport class QuestionarioList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            questoes: [],\n            materialSelecionado: {\n                cursoTitulo: '',\n                materialTitulo: '',\n                unidadeTitulo: '',\n                cursoId: 0\n            },\n            modalAlternativas: false,\n            alternativaSelecionada: 0,\n            updateQuestoes: 1,\n            questaoSelecionada: this.initializeQuestao(),\n            respostas: []\n        }\n        this.novaQuestao = this.novaQuestao.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.seleciona = this.seleciona.bind(this)\n        this.salvarQuestao = this.salvarQuestao.bind(this)\n        this.guardarResposta = this.guardarResposta.bind(this)\n    }\n\n    initializeQuestao() {\n        return {\n            id: 0,\n            enunciado: \"\",\n            ordem: 0,\n            material_id: this.props.questionario.id\n        }\n    }\n\n    handleChange(e, obj) {\n        const element = obj !== undefined ? obj : e.target\n        const questao = this.state.questaoSelecionada\n        if (element === obj && element.checked !== undefined)\n            questao[element.name] = element.checked\n        else\n            questao[element.name] = element.value\n\n        questao.material_id = this.state.materialSelecionado.id\n        this.setState({ questaoSelecionada: questao })\n    }\n\n    setStatusRequisicao(resultado) {\n        Notificacao.gerar(resultado)\n        if (resultado.data.flag) {\n            this.setState({ questaoSelecionada: this.initializeQuestao() })\n            this.updateQuestoes()\n            this.props.setVisibleModal(false)\n            if (this.props.updateMateriais !== undefined)\n                this.props.updateMateriais()\n\n            if (this.props.update !== undefined) {\n                this.verificaUpdateCurso()\n            }\n        }\n    }\n\n    async verificaUpdateCurso() {\n        const validaDados = this.isCursoConcluido\n        const atualiza = this.props.update\n        CursoRepository.isConcluido(this.state.materialSelecionado.cursoId).then(function (dadosConclusao) {\n            if (validaDados(dadosConclusao.data))\n                atualiza()\n        })\n    }\n\n    isCursoConcluido(dadosConclusao) {\n        const concluido = Number(dadosConclusao.percentual_total);\n        const minimo = Number(dadosConclusao.percentual_docs) + Number(dadosConclusao.percentual_questoes)\n        return concluido >= minimo\n    }\n\n    async componentDidMount() {\n        this.updateQuestoes()\n    }\n\n    async salvarQuestao() {\n        return QuestionarioRepository.save(this.state.questaoSelecionada)\n    }\n\n    async updateQuestoes() {\n        const materialId = this.props.questionario.id\n        const questoes = await QuestionarioRepository.findByMaterialId(materialId)\n        const material = await MaterialRepository.findById(materialId)\n        this.setState({ questoes: questoes.data })\n        this.setState({ materialSelecionado: material.data })\n        this.setState({ updateQuestoes: this.state.updateQuestoes + 1 })\n    }\n\n    showModalAlternativas() {\n        return (\n            <Modal open={this.state.modalAlternativas} wide=\"very\"\n                content={\n                    <Segment className=\"bottom-extended\">\n                        <Label attached=\"top left\" basic>Enunciado</Label>\n                        <Form>\n                            <Form.Group>\n                                <TextArea\n                                    style={{ maxHeight: 100 }}\n                                    rows={3}\n                                    type=\"text\"\n                                    size=\"small\"\n                                    name=\"enunciado\"\n                                    value={this.state.questaoSelecionada.enunciado}\n                                    onChange={this.handleChange}\n                                    width={\"16\"} />\n                            </Form.Group>\n                            <Divider></Divider>\n                            <Form.Group>\n                                <Form.Field width={\"16\"}>\n                                    <AlternativaList\n                                        key={\"questao-edicao-\" + this.state.questaoSelecionada.id}\n                                        questao={this.state.questaoSelecionada} >\n                                    </AlternativaList>\n                                </Form.Field>\n                            </Form.Group>\n                        </Form>\n                        <Modal.Actions className=\"bottom-extended\">\n                            <Button onClick={() => this.setModalVisivel(false)} basic size=\"mini\"><Icon name=\"arrow left\"></Icon> Voltar para as Questões</Button>\n                        </Modal.Actions>\n                    </Segment>\n                }\n                on='click'\n                position=\"right center\"\n            />\n        )\n    }\n\n    seleciona(questao) {\n        this.setState({ questaoSelecionada: questao })\n        this.setModalVisivel(true)\n    }\n\n    async novaQuestao() {\n        this.setStatusRequisicao(await QuestionarioRepository.nova(this.state.materialSelecionado))\n    }\n\n    async removerQuestao(questao) {\n        this.setStatusRequisicao(await QuestionarioRepository.remove(questao))\n    }\n\n    setModalVisivel(open) {\n        this.setState({ modalAlternativas: open })\n        if (!open) {\n            this.salvarQuestao(this.state.materialSelecionado).then(() => this.updateQuestoes())\n\n        }\n    }\n\n    guardarResposta(resposta) {\n        this.state.respostas.map(resp => {\n            if (resp.questao_id === resposta.questao_id)\n                this.state.respostas.splice(this.state.respostas.indexOf(resp), 1)\n        })\n\n        this.state.respostas.push(resposta)\n\n        this.setState({ respostas: this.state.respostas })\n    }\n\n    async enviarQuestoes() {\n        if (this.state.respostas.length !== this.state.questoes.length)\n            Notificacao.gerar({ data: { flag: false, msg: \"Responda todas as questões\" } })\n        else {\n            this.state.respostas[0].material_id = this.state.materialSelecionado.id;\n            this.state.respostas[0].usuario_id = Auth.get().id;\n            this.state.respostas[0].curso_id = this.state.materialSelecionado.cursoId\n\n            this.setStatusRequisicao(await QuestionarioRepository.enviar(this.state.respostas))\n\n        }\n\n    }\n\n    renderQuestoesAluno() {\n        return (\n            <Modal size=\"large\" open={true}>\n                <Modal.Header>\n                    <Breadcrumb icon='right angle' sections={\n                        [\n                            { key: 'curso', content: \"Curso: \" + this.state.materialSelecionado.cursoTitulo, link: false },\n                            { key: 'unidade', content: \"Unidade: \" + this.state.materialSelecionado.unidadeTitulo, link: false },\n                            { key: 'material', content: \"Questionário: \" + this.state.materialSelecionado.titulo, active: true }\n                        ]\n                    } />\n\n                </Modal.Header>\n                <Modal.Content key={\"modal-quetionario-\" + this.state.updateQuestoes} scrolling>\n                    <List>\n                        {this.state.questoes.map(questao => (\n                            <List.Item key={\"questao-item-\" + questao.id}>\n\n                                {questao.enunciado}\n                                <AlternativaList guardarResposta={this.guardarResposta.bind(this)} questao={questao}></AlternativaList>\n\n                            </List.Item >\n                        ))}\n                    </List>\n\n                </Modal.Content>\n                <Modal.Actions className=\"bottom-extended\">\n                    <Link to={\"/cursos/\" + this.state.materialSelecionado.cursoId}>\n                        <Button onClick={() => this.props.setVisibleModal(false)} floated=\"left\" basic size=\"mini\"><Icon name=\"arrow left\"></Icon> Voltar para o Curso</Button>\n                    </Link>\n                    <Button onClick={() => this.enviarQuestoes()} floated=\"right\" basic size=\"mini\">Enviar Questionário <Icon name=\"arrow right\"></Icon></Button>\n                </Modal.Actions>\n            </Modal>\n\n        )\n    }\n\n\n    render() {\n        return Auth.isPerfilAdm() ? (\n            <Modal size=\"large\" open={true}>\n                <Modal.Header>\n                    <Breadcrumb icon='right angle' sections={\n                        [\n                            { key: 'curso', content: \"Curso: \" + this.state.materialSelecionado.cursoTitulo, link: false },\n                            { key: 'unidade', content: \"Unidade: \" + this.state.materialSelecionado.unidadeTitulo, link: false },\n                            { key: 'material', content: \"Questionário: \" + this.state.materialSelecionado.titulo, active: true }\n                        ]\n                    } />\n\n                </Modal.Header>\n                <Modal.Content key={\"modal-quetionario-\" + this.state.updateQuestoes} scrolling>\n                    <Button onClick={() => this.novaQuestao()} basic size=\"mini\"><Icon name=\"add\"></Icon> Nova Questão</Button>\n                    <List>\n                        {this.state.questoes.map(questao => (\n                            <List.Item key={\"questao-item-\" + questao.id}>\n                                <Segment>\n                                    <Grid columns={3} stackable textAlign='center'>\n                                        <Grid.Row verticalAlign='middle'>\n                                            <Grid.Column>\n                                                <i>\n                                                    {questao.enunciado}\n                                                </i>\n                                            </Grid.Column>\n                                            <Grid.Column>\n                                                <i>\n                                                    {questao.alternativaCorretaTexto === null ? \"Nenhuma Alternativa Selecionada\" : questao.alternativaCorretaTexto}\n                                                </i>\n                                            </Grid.Column>\n                                            <Grid.Column>\n                                                <Button onClick={() => this.removerQuestao(questao)} size=\"mini\" floated=\"right\" basic icon=\"close\" ></Button>\n                                                <Button key={\"edita-alternativas-questao-\" + questao.id} onClick={() => this.seleciona(questao)} icon=\"pencil\" floated=\"right\" size=\"mini\" basic></Button>\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                    </Grid>\n\n                                </Segment>\n                            </List.Item >\n                        ))}\n                        {this.state.modalAlternativas ? this.showModalAlternativas() : ''}\n                    </List>\n\n                </Modal.Content>\n                <Modal.Actions className=\"bottom-extended\">\n                    <Link to={\"/cursos/\" + this.state.materialSelecionado.cursoId}>\n                        <Button onClick={() => this.props.setVisibleModal(false)} floated=\"left\" basic size=\"mini\"><Icon name=\"arrow left\"></Icon> Voltar para o Curso</Button>\n                    </Link>\n\n                </Modal.Actions>\n            </Modal>\n        ) : this.renderQuestoesAluno();\n    }\n}","import React, { Component } from 'react';\nimport { List, Button, Icon, Label, Segment, Menu } from 'semantic-ui-react'\nimport { MaterialItemForm } from './MaterialItemForm';\nimport { MaterialRepository } from '../../api/MaterialRepository';\nimport { Notificacao } from '../notificacao/Notificacao';\nimport { QuestionarioList } from '../questionario/QuestionarioList';\nimport { Auth } from '../../api/Auth';\nimport { CursoRepository } from '../../api/CursoRepository';\n\nexport class MaterialList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            materiais: [],\n            materialSelecionado: this.initializeMaterial(),\n            updateMateriais: 1,\n            modalQuestoes: false\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n        this.limpaSelecao = this.limpaSelecao.bind(this)\n        this.seleciona = this.seleciona.bind(this)\n        this.setVisibleModalQuestoes = this.setVisibleModalQuestoes.bind(this)\n    }\n\n    async componentDidMount() {\n        this.updateMateriais()\n    }\n\n    async updateMateriais() {\n        if (this.props.unidadeSelecionada !== undefined) {\n            const resultado = await MaterialRepository.possuiInteracao(Auth.get().id, this.props.unidadeSelecionada.curso_id, this.props.unidadeSelecionada.id);\n            let materiais = []\n            resultado.data.map(m => {\n                m.final = m.final === \"1\"\n                materiais.push(m)\n            })\n            this.setState({ materiais: materiais })\n        }\n        this.setState({ updateMateriais: this.state.updateMateriais + 1 })\n    }\n\n    getMaterialIcon(material) {\n        switch (material.tipo) {\n            case 'V':\n                return \"play\"\n            case 'D':\n                return this.getTipoDocumento(material.url)\n            case 'Q':\n                return \"question circle outline\"\n        }\n    }\n\n    initializeMaterial() {\n        return {\n            id: 0,\n            titulo: '',\n            url: '',\n            tipo: '',\n            final: false\n        }\n    }\n\n    getTipoDocumento(nomeArquivo) {\n        if (nomeArquivo.includes(\".pdf\"))\n            return \"file pdf outline\";\n\n        if (nomeArquivo.includes(\".doc\"))\n            return \"file word outline\";\n\n        if (nomeArquivo.includes(\".xls\"))\n            return \"file excel outline\";\n\n        if (this.isImage(nomeArquivo))\n            return \"file image\"\n\n        if (this.isCompressed(nomeArquivo))\n            return \"file archive\"\n\n        return \"file outline\"\n    }\n\n    limpaSelecao() {\n        this.setState({ materialSelecionado: this.initializeMaterial() })\n    }\n\n    setVisibleModalQuestoes(flag) {\n        this.setState({ modalQuestoes: flag })\n    }\n\n    seleciona(material) {\n        this.setMaterialFinal(material)\n        this.setState({ materialSelecionado: material })\n    }\n\n    editaQuestoes(material) {\n        this.seleciona(material)\n        if (material.tipo === 'Q') {\n            this.setVisibleModalQuestoes(true)\n        }\n    }\n\n    isImage(url) {\n        const imageRegex = new RegExp(/\\.(jpg|png|gif|bmp)$/i)\n        return imageRegex.test(url);\n    }\n\n    isCompressed(url) {\n        const imageRegex = new RegExp(/\\.(zip|rar|gz|7z)$/i)\n        return imageRegex.test(url);\n    }\n\n    async salvarMaterial() {\n        this.setStatusRequisicao(await MaterialRepository.save(this.state.materialSelecionado));\n    }\n\n    async removerMaterial(material) {\n        this.setStatusRequisicao(await MaterialRepository.remove(material));\n    }\n\n    async registrarInteracao(material) {\n        if (!material.interacao || material.interacao < 100)\n            this.setStatusRequisicao(await MaterialRepository.interacao(material.id, Auth.get().id, this.props.unidadeSelecionada.curso_id));\n    }\n\n    handleClick(acao) {\n        if (acao === \"SM\") {\n            this.salvarMaterial()\n        }\n        else\n            if (acao === \"RM\") {\n                this.removerMaterial()\n            }\n    }\n\n    getDadosMaterial(material) {\n        return material\n    }\n\n    load() {\n        window.location.reload()\n    }\n\n    renderBotaoVisualizacao(material) {\n        if (material.tipo !== 'Q')\n            return (<a onClick={() => this.registrarInteracao(material)} target='_blank' href={`${material.url}`}><Button floated=\"right\" basic size=\"mini\" >Ver Material</Button> </a>)\n        else\n            return (<Button onClick={() => this.editaQuestoes(material)} floated=\"right\" basic size=\"mini\">Responder Questionário</Button>)\n\n    }\n\n    escondeMaterial(material) {\n        if (this.todosMaterialsDaUnidadeConcluidos())\n            return false\n\n        return material.final && !Auth.isPerfilAdm()\n    }\n\n    todosMaterialsDaUnidadeConcluidos() {\n        let item = this.state.materiais.find(function (material) {\n            return material.interacao === 0 && !material.final\n        })\n        return item === undefined\n    }\n\n    mostraInteracao(material) {\n        if (material.interacao > 70)\n            return (<Label color=\"green\" basic floated=\"right\" size=\"mini\"><Icon name=\"green check\"></Icon>{material.interacao + \"%\"}</Label>)\n\n        if (!material.interacao)\n            material.interacao = 0;\n\n        return (<Label color=\"orange\" basic floated=\"right\" size=\"mini\"><Icon name=\"orange circle\"></Icon>{material.interacao + \"%\"}</Label>)\n    }\n\n    renderMaterial(material) {\n\n        return this.escondeMaterial(material) ? '' : (\n            <List.Item key={material.id}>\n                <Segment s>\n                    <Label basic>\n                        <Icon size=\"large\" name={this.getMaterialIcon(material)} />\n                        {material.titulo}\n                    </Label>\n                    {!Auth.isPerfilAdm() ? this.mostraInteracao(material) : ''}\n                    {!Auth.isPerfilAdm() ? this.renderBotaoVisualizacao(material) : this.renderEdicaoMaterial(material)}\n                    {material.final ? (<Label color=\"red\" size='mini' floating basic>Final</Label>) : ''}\n                </Segment>\n            </List.Item>\n        )\n    }\n\n    renderMaterialPorTipo(materialItem, titulo) {\n        return (\n            <List.Item key={\"conj-\" + titulo}>\n                <List selection verticalAlign='middle' key={\"list-\" + titulo}>\n                    <Label><Icon name=\"tag\" />{titulo}</Label>\n                    {this.renderMaterial(materialItem)}\n                </List>\n            </List.Item>\n        )\n    }\n\n    renderEdicaoMaterial(material) {\n        return (\n            <Menu secondary size=\"mini\" compact floated=\"right\">\n                {\n                    material.tipo === 'Q' ?\n                        <Menu.Item><Button onClick={() => this.editaQuestoes(material)} basic size=\"mini\">Questões</Button></Menu.Item> : ''\n                }\n               \n                <Menu.Item>\n                    <MaterialItemForm\n                        material={material}\n                        seleciona={this.seleciona}\n                        limpa={this.limpaSelecao}\n                        titulo={\"Editar \" + material.titulo}\n                        icon=\"pencil\"\n                        buttonTitle=\"\"\n                        buttonFloated=\"right\"\n                        handleChange={this.handleChange}\n                        handleClick={this.handleClick}\n                        position=\"left center\"></MaterialItemForm>\n                </Menu.Item>\n                <Menu.Item>\n                    <Button onClick={() => this.removerMaterial(material)} icon=\"close\" basic size=\"mini\"></Button>\n                </Menu.Item>\n            </Menu>)\n    }\n\n    setStatusRequisicao(resultado) {\n        Notificacao.gerar(resultado)\n        if (resultado.data.flag) {\n            this.setState({ materialSelecionado: this.initializeMaterial() })\n            this.updateMateriais()\n            if (this.props.update !== undefined) {\n                this.verificaUpdateCurso()\n            }\n        }\n    }\n\n    async verificaUpdateCurso() {\n        const validaDados = this.isCursoConcluido\n        const atualiza = this.props.update\n        CursoRepository.isConcluido(this.props.unidadeSelecionada.curso_id).then(function (dadosConclusao) {\n            if (validaDados(dadosConclusao.data))\n                atualiza()\n        })\n    }\n\n    isCursoConcluido(dadosConclusao) {\n        const concluido = Number(dadosConclusao.percentual_total);\n        const minimo = Number(dadosConclusao.percentual_docs) + Number(dadosConclusao.percentual_questoes)\n        return concluido >= minimo\n    }\n\n    renderMateriais(materiais, tipo, titulo) {\n        const filtredMaterials = materiais.find(m => m.tipo === String(tipo))\n        if (filtredMaterials) {\n            if (Array.isArray(filtredMaterials))\n                return (filtredMaterials.map(material => (\n                    this.renderMaterialPorTipo(material, titulo)\n                )))\n\n            return this.renderMaterialPorTipo(filtredMaterials, titulo);\n        }\n    }\n    handleChange(e, obj) {\n        const element = obj !== undefined ? obj : e.target\n        const material = this.state.materialSelecionado\n        if (element === obj && element.checked !== undefined)\n            material[element.name] = element.checked\n        else\n            material[element.name] = element.value\n        material.unidade_id = this.props.unidadeSelecionada.id\n        this.setMaterialFinal(material)\n        this.setState({ materialSelecionado: material })\n    }\n\n    setMaterialFinal(material) {\n        if (material.tipo !== \"Q\") {\n            material.final = false;\n        }\n    }\n\n    renderQuestionarioList() {\n        return this.state.modalQuestoes ? (\n            <QuestionarioList\n                setVisibleModal={this.setVisibleModalQuestoes.bind(this)}\n                updateMateriais={this.updateMateriais.bind(this)}\n                modalQuestoes={this.state.modalQuestoes}\n                questionario={this.state.materialSelecionado}\n                update={this.props.update}>\n            </QuestionarioList>) : ''\n    }\n\n    render() {\n        return (\n            <div key={'lista-materiais-unidade-' + this.props.unidadeSelecionada + \"-\" + this.state.updateMateriais}>\n                <List animated selection verticalAlign='middle' key={\"list-documentos\"}>\n                    {\n                        this.state.materiais.map(material => (\n                            this.renderMaterial(material)\n                        ))\n                    }\n                </List>\n                {Auth.isPerfilAdm() ? (\n                    <MaterialItemForm\n                        material={this.state.materialSelecionado}\n                        titulo={\"Inclusão Material\"}\n                        seleciona={this.seleciona}\n                        limpa={this.limpaSelecao}\n                        icon=\"add\"\n                        buttonTitle=\"Incluir Material\"\n                        buttonFloated=\"left\"\n                        handleClick={this.handleClick}\n                        handleChange={this.handleChange}\n                        position=\"left center\"></MaterialItemForm>\n                ) : ''}\n                {this.renderQuestionarioList()}\n            </div >\n\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Icon, Header, Button, Accordion, Popup, Form, Segment } from 'semantic-ui-react'\nimport { Notificacao } from '../notificacao/Notificacao';\nimport { UnidadeRepository } from '../../api/UnidadeRepository';\nimport { MaterialList } from '../material/MaterialList';\nimport { Auth } from '../../api/Auth';\n\nexport class UnidadeList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cursoSelecionado: {},\n            unidades: [],\n            unidadeSelecionada: this.initializeUnidade(),\n            activeIndex: 0\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n        this.setStatusRequisicao = this.setStatusRequisicao.bind(this)\n        this.removerUnidade = this.removerUnidade.bind(this)\n        this.salvarUnidade = this.salvarUnidade.bind(this)\n        this.selecionaUnidade = this.selecionaUnidade.bind(this)\n        this.limparSelecaoUnidade = this.limparSelecaoUnidade.bind(this)\n        this.updateUnidades = this.updateUnidades.bind(this)\n    }\n\n    async componentDidMount() {\n        this.updateUnidades();\n    }\n\n    handleClickAccordionUnidades = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    setStatusRequisicao(resultado) {\n        Notificacao.gerar(resultado)\n        if (resultado.data.flag) {\n            this.setState({ unidadeSelecionada: this.initializeUnidade() })\n            this.updateUnidades()\n            this.props.update()\n        }\n    }\n\n    async updateUnidades() {\n        if (this.props.curso.id !== undefined) {\n            const unidades = await UnidadeRepository.findByCursoId(this.props.curso.id)\n            this.setState({ unidades: unidades.data })\n            this.setState({ cursoSelecionado: this.props.curso })\n        }\n    }\n\n    handleChange(e, obj) {\n        const element = obj !== undefined ? obj : e.target\n        const unidade = this.state.unidadeSelecionada\n        unidade[element.name] = element.value\n        unidade.curso_id = this.state.cursoSelecionado.id\n        this.setState({ unidadeSelecionada: unidade })\n    }\n\n    async salvarUnidade() {\n        this.setStatusRequisicao(await UnidadeRepository.save(this.state.unidadeSelecionada));\n    }\n\n    async removerUnidade(unidade) {\n        this.setStatusRequisicao(await UnidadeRepository.remove(unidade));\n    }\n\n    initializeUnidade() {\n        return {\n            id: 0,\n            titulo: '',\n        }\n    }\n\n    selecionaUnidade(unidade) {\n        this.setState({ unidadeSelecionada: unidade })\n    }\n\n    limparSelecaoUnidade() {\n        this.setState({ unidadeSelecionada: this.initializeUnidade() })\n    }\n\n\n    handleClick(acao) {\n        if (acao === \"SU\") {\n            this.salvarUnidade()\n        }\n        else\n            if (acao === \"RU\") {\n                this.removerUnidade()\n            }\n    }\n\n    render() {\n        return (\n            <div>\n                <Accordion styled>{\n                    this.state.unidades && this.state.unidades.map(unidade => (\n                        <div key={\"unidade-accod-\" + unidade.id}>\n                            <Accordion.Title\n                                active={this.state.activeIndex === unidade.id}\n                                index={unidade.id}\n                                onClick={this.handleClickAccordionUnidades}>\n                                <Icon name='dropdown' />\n                                {unidade.titulo}\n                            </Accordion.Title>\n                            <Accordion.Content active={this.state.activeIndex === unidade.id}>\n                                <MaterialList update={this.props.update} cursoSelecionado={this.props.curso} unidadeSelecionada={unidade}></MaterialList>\n                                {Auth.isPerfilAdm() ? (\n                                    <Button.Group key={'edicao-unidade-' + unidade.id} floated=\"right\" size=\"mini\" basic>\n                                        <Popup wide=\"very\"\n                                            trigger={\n                                                <Button onClick={() => this.selecionaUnidade(unidade)}><Icon name=\"pencil\"></Icon>Editar {unidade.titulo}</Button>\n                                            }\n                                            content={\n                                                <Form>\n                                                    <Header>Editar Unidade</Header>\n                                                    <Form.Group>\n                                                        <Form.Field>\n                                                            <label>Título</label>\n                                                            <input\n                                                                placeholder='Título'\n                                                                name=\"titulo\"\n                                                                type=\"text\"\n                                                                value={this.state.unidadeSelecionada.titulo}\n                                                                onChange={this.handleChange}\n                                                            />\n                                                        </Form.Field>\n                                                        <Form.Field>\n                                                            <label>&nbsp;</label>\n                                                            <Button onClick={() => this.handleClick('SU')} floated=\"right\" icon=\"check\" basic></Button>\n                                                        </Form.Field>\n                                                    </Form.Group>\n                                                </Form>\n                                            }\n                                            on='click'\n                                            position='right center'\n                                        />\n                                        <Button onClick={() => this.removerUnidade(unidade)} ><Icon name=\"close\"></Icon>Remover {unidade.titulo}</Button>\n                                    </Button.Group>) : ''}\n                            </Accordion.Content>\n                        </div>\n                    ))\n                }\n                </Accordion>\n                {\n                    Auth.isPerfilAdm() ? (<Button.Group floated='left'>\n                        <Popup wide=\"very\"\n                            trigger={\n                                <Button onClick={() => this.limparSelecaoUnidade()} size=\"mini\" basic>Adicionar Unidade</Button>\n                            }\n                            content={\n                                <Form>\n                                    <Header>Nova Unidade</Header>\n                                    <Form.Group>\n                                        <Form.Field>\n                                            <label>Título</label>\n                                            <input\n                                                placeholder='Título'\n                                                name=\"titulo\"\n                                                type=\"text\"\n                                                value={this.state.unidadeSelecionada.titulo}\n                                                onChange={this.handleChange}\n                                            />\n                                        </Form.Field>\n                                        <Form.Field>\n                                            <label>&nbsp;</label>\n                                            <Button onClick={() => this.handleClick('SU')} floated=\"right\" icon=\"check\" basic></Button>\n                                        </Form.Field>\n                                    </Form.Group>\n                                </Form>\n                            }\n                            on='click'\n                            position='right center'\n                        />\n                    </Button.Group>) : ''}\n            </div>\n        )\n    }\n\n}","import { WebApi } from './WebApi';\nexport class TagaRepository {\n\n    static all() {\n        return WebApi.create().get('tags')\n    }\n    \n    static findByCursoId(cursoId) {\n        return WebApi.create().get(`tags/curso/${cursoId}`)\n    }\n\n    static save(tag) {\n        return WebApi.create().post('tags', tag)\n    }\n\n    static remove(tag) {\n        return WebApi.create().delete('tags', { \"data\": tag })\n    }\n}\n","import React, { Component } from 'react';\nimport { Segment, Divider, Icon, Image } from 'semantic-ui-react';\nimport './certificado.css'\n\nexport class Certificado extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n\n    render() {\n        return (\n            <Segment textAlign=\"center\" className='container-certificado'>\n                <Divider></Divider>\n                <Image centered size=\"mini\" src='/logo.png' alt='logo incompany' />\n                <div>Incompany Trainning</div>\n                <br />\n                <br />\n                <div>Certifica que <b>{this.props.usuario.nome}</b> concluiu o todas <br />\n                    as unidades do curso <b>{this.props.curso.titulo}</b> com aproveitamento <br />\n                    satisfatório e carga horária de <b>20</b> horas. </div>\n                <br />\n                <br />\n                <div>Incompany Trainning Sistema de treinamentos para empresas</div>\n                <Divider></Divider>\n            </Segment>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { CursoRepository } from '../../api/CursoRepository';\nimport {\n    Segment, Form, Button, Divider,\n    Header, Label, Icon,\n    Input, Dropdown, List, Grid, Menu, Rating, TextArea,\n} from 'semantic-ui-react';\nimport './curso-detalhe.css'\nimport { Auth } from '../../api/Auth';\nimport { CategoriaRepository } from '../../api/CategoriaRepository';\nimport { UnidadeList } from '../unidade/UnidadeList';\nimport { Link } from \"react-router-dom\";\nimport { BarraTopo } from '../BarraTopo';\nimport { TagaRepository } from '../../api/TagRepository';\nimport { Notificacao } from '../notificacao/Notificacao';\nimport ReactToPrint from 'react-to-print';\nimport { Certificado } from '../certificado/Certificado';\nimport { PopupForm } from '../PopupForm';\n\nexport class CursoDetalhe extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cursoSelecionado: {\n                unidades: []\n            },\n            tagSelecionada: this.initializeTag(),\n            categorias: [],\n            tags: [],\n            updateCurso: 1,\n            dadosConclusao: {},\n            avaliacao: {\n                nota: 0,\n                comentario: ''\n            },\n            updateAvaliacao: 1\n        }\n\n        this.backToDashBoard = this.backToDashBoard.bind(this)\n        this.handleChangeTag = this.handleChangeTag.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.excluiTag = this.excluiTag.bind(this)\n        this.salvarTag = this.salvarTag.bind(this)\n        this.isCursoConcluido = this.isCursoConcluido.bind(this)\n        this.onChangeAvaliacao = this.onChangeAvaliacao.bind(this)\n    }\n\n    async componentDidMount() {\n        console.log(this.props.location.search)\n        this.updateCurso();\n    }\n\n    initializeTag() {\n        return {\n            id: 0,\n            descricao: '',\n            curso: this.props.match.params.id\n        }\n    }\n\n    async excluiTag(tag) {\n        this.setStatusRequisicao(await TagaRepository.remove(tag))\n    }\n\n    async salvarTag(tag) {\n        this.setStatusRequisicao(await TagaRepository.save(this.state.tagSelecionada))\n    }\n\n    setStatusRequisicao(resultado) {\n        Notificacao.gerar(resultado)\n        if (resultado.data.flag)\n            this.updateTags()\n\n        if (resultado.data.msg.includes('Avaliação'))\n            this.updateCurso()\n    }\n\n    handleChangeTag(e, obj) {\n        const element = obj !== undefined ? obj : e.target\n        const tag = this.state.tagSelecionada\n        tag[element.name] = element.value\n        tag.curso_id = this.props.match.params.id\n        this.setState({ tagSelecionada: tag })\n    }\n\n    onChangeAvaliacao(e, obj) {\n        const element = obj !== undefined ? obj : e.target\n        const avaliacao = this.state.avaliacao\n        avaliacao[element.name] = element.value\n        this.setState({ avaliacao: avaliacao })\n    }\n\n    async updateCurso() {\n        const curso = await CursoRepository.findById(this.props.match.params.id)\n        const avaliacao = await CursoRepository.getAvaliacao(this.props.match.params.id)\n        const dadosConclusao = await CursoRepository.isConcluido(this.props.match.params.id)\n        const categorias = await CategoriaRepository.all();\n        this.updateTags()\n        this.setState({ categorias: this.buildDropdownItensCategoria(categorias.data) })\n        this.setState({ cursoSelecionado: curso.data })\n        this.setState({ avaliacao: avaliacao.data })\n        this.setState({ dadosConclusao: dadosConclusao.data })\n        this.setState({ isConcluido: this.isCursoConcluido() })\n        this.setState({ updateCurso: this.state.updateCurso + 1 })\n    }\n\n    async updateTags() {\n        const tags = await TagaRepository.all()\n        this.setState({ tags: tags.data })\n        this.setState({ tagSelecionada: this.initializeTag() })\n    }\n\n    buildDropdownItensCategoria(categorias) {\n        let categoriasItens = []\n        categorias.map(categoria => {\n            return categoriasItens.push({ key: categoria.id, text: categoria.descricao, value: categoria.id })\n        })\n        return categoriasItens\n    }\n\n    handleChange(e, obj) {\n        const element = obj !== undefined ? obj : e.target\n        const curso = this.state.cursoSelecionado\n        curso[element.name] = element.value\n        curso.usuario_id = Auth.get().id\n        this.setState({ cursoSelecionado: curso })\n    }\n\n    getTags() {\n        return [\n            { id: 1, nome: \"teste\" },\n            { id: 2, nome: \"teste\" }\n        ]\n    }\n\n    getCategorias() {\n        return [\n            { key: 1, text: 'Costura Integrada', value: 1 },\n            { key: 2, text: 'Teste 2', value: 2 },\n            { key: 3, text: '3', value: 3 }\n        ]\n    }\n\n    backToDashBoard(e) {\n        this.props.location.back()\n        this.props.history.push('/')\n    }\n\n    isCursoConcluido() {\n        const concluido = Number(this.state.dadosConclusao.percentual_total);\n        const minimo = Number(this.state.dadosConclusao.percentual_docs) + Number(this.state.dadosConclusao.percentual_questoes)\n        return concluido >= minimo\n    }\n\n    async salvarCurso() {\n        this.setStatusRequisicao(await CursoRepository.save(this.state.cursoSelecionado));\n    }\n\n    async enviarAvaliacao() {\n        this.setStatusRequisicao(await CursoRepository.enviarAvaliacao(this.state.cursoSelecionado.id, this.state.avaliacao.comentario, this.state.avaliacao.nota))\n    }\n\n    renderAreaAluno() {\n        return (\n            <div key={'area-aluno-' + this.state.updateCurso}>\n                <BarraTopo></BarraTopo>\n                {\n                    this.state.isConcluido ?\n                        <Certificado\n                            ref={el => (this.componentRef = el)}\n                            curso={this.state.cursoSelecionado}\n                            usuario={Auth.get()} /> : ''\n                }\n\n                <Segment key={this.state.updateCurso}>\n\n                    <Segment >{this.state.cursoSelecionado.titulo}\n                        {this.state.isConcluido ? (<div style={{ display: \"inline-block\" }} >\n                            &nbsp;&nbsp; (Concluído) <Icon name=\"green check\"></Icon> &nbsp;&nbsp;&nbsp;&nbsp;\n                            <Menu text compact size=\"mini\">\n                                <Menu.Item>\n                                    <div>\n                                        <ReactToPrint\n                                            trigger={() => <Button basic size=\"mini\" color=\"purple\"><Icon name=\"certificate\"></Icon>Imprimir/Salvar Certificado</Button>}\n                                            content={() => this.componentRef}\n                                        />\n                                    </div>\n                                </Menu.Item>\n                                <Menu.Item>\n                                    <PopupForm\n                                        trigger={\n                                            <Button basic size=\"mini\" color=\"blue\"><Icon name=\"comment\"></Icon> Feedback</Button>\n                                        }\n                                        position=\"left center\"\n                                        content={\n                                            <Form encType=\"multipart/form-data\">\n                                                <Header>Avaliação curso</Header>\n\n                                                <Form.Field>\n                                                    <label>Nota: {this.state.avaliacao.nota}</label>\n                                                    <input placeholder='Nota'\n                                                        name=\"nota\"\n                                                        max={5}\n                                                        type=\"range\"\n                                                        value={this.state.avaliacao.nota}\n                                                        onChange={this.onChangeAvaliacao} />\n                                                </Form.Field>\n                                                <Form.Field>\n                                                    <label>Comentário</label>\n                                                    <TextArea name='comentario'\n                                                        onChange={this.onChangeAvaliacao}\n                                                        rows={3}\n                                                        placeholder='Comentário'\n                                                        value={this.state.avaliacao.comentario} />\n                                                </Form.Field>\n                                                <Form.Field >\n                                                    <label>&nbsp;</label>\n                                                    <Button\n                                                        onClick={() => this.enviarAvaliacao()}\n                                                        icon=\"check\"\n                                                        basic></Button>\n                                                </Form.Field>\n\n                                            </Form>\n                                        }\n                                    ></PopupForm>\n                                </Menu.Item>\n                            </Menu>\n                        </div>) : ''}\n                        <Divider vertical></Divider>\n                        <Link to={`/dashboard`}>\n                            <Button size=\"mini\" basic floated=\"right\"> Voltar aos cursos</Button>\n                        </Link>\n                    </Segment>\n                    <Grid>\n                        <Grid.Row>\n                            <Grid.Column width={16}>\n                                <UnidadeList update={this.updateCurso.bind(this)} curso={this.state.cursoSelecionado}></UnidadeList>\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Segment>\n            </div>\n\n        )\n\n    }\n\n    render() {\n        return !Auth.isPerfilAdm() ? this.renderAreaAluno() :\n            (\n                <div>\n                    <BarraTopo></BarraTopo>\n                    <Segment>\n                        <Segment key={this.state.updateCurso} className=\"bottom-extended\">\n                            <Header>{this.state.titulo}</Header>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Field width={6} >\n                                        <label>Título</label>\n                                        <input\n                                            type=\"text\"\n                                            name=\"titulo\"\n                                            placeholder='Título'\n                                            onChange={this.handleChange}\n                                            value={this.state.cursoSelecionado.titulo} />\n                                    </Form.Field>\n                                    <Form.Field width={5}>\n                                        <label>Categoria</label>\n                                        <Dropdown selection\n                                            onChange={this.handleChange}\n                                            name='categoria_id'\n                                            value={this.state.cursoSelecionado.categoria_id}\n                                            options={this.state.categorias} />\n                                    </Form.Field>\n                                    <Form.Field width={5}>\n                                        <label>Nome Tutor</label>\n                                        <input placeholder='Nome do Tutor'\n                                            name=\"nome_tutor\"\n                                            type=\"text\"\n                                            onChange={this.handleChange}\n                                            value={this.state.cursoSelecionado.nome_tutor} />\n                                    </Form.Field>\n                                    <Form.Field width={4}>\n                                        <label>Tags</label>\n                                        <Input\n                                            name=\"descricao\"\n                                            value={this.state.tagSelecionada.descricao}\n                                            onChange={this.handleChangeTag}\n                                            icon='tags'\n                                            size=\"small\"\n                                            iconPosition='left'\n                                            label={{ tag: false, content: (<a onClick={this.salvarTag}><Icon name=\"add\"></Icon></a>), basic: true }}\n                                            labelPosition='right'\n                                            placeholder='Enter tags'\n                                        />\n                                    </Form.Field>\n                                </Form.Group>\n                                <List horizontal>\n                                    {\n                                        this.state.tags.map(t => (\n                                            <Label size=\"small\" key={t.id} as='a' tag>\n                                                {t.descricao}\n                                                <a onClick={() => this.excluiTag(t)} ><Icon size=\"big\" name=\"close\"></Icon></a>\n                                            </Label>\n                                        ))\n                                    }\n                                </List>\n                                <Divider></Divider>\n                                <Header className=\"header-detalhes\">Unidades</Header>\n                                <UnidadeList update={this.updateCurso.bind(this)} curso={this.state.cursoSelecionado}></UnidadeList>\n                                <Button.Group floated='right'>\n                                    <Link to=\"/\">\n                                        <Button basic > <Icon name='arrow left' />Voltar</Button>\n                                    </Link>\n                                    <Button onClick={() => this.salvarCurso()} className='button-action-detail' basic> <Icon name='check' /> Salvar Curso</Button>\n                                </Button.Group>\n                            </Form>\n                        </Segment>\n                    </Segment>\n                </div>\n            );\n    }\n}","import React, { Component } from 'react';\nimport {\n    Segment, Form, Button,\n    Icon, Container, Image, Divider,\n    Header, Label, Menu\n} from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'react-toastify/dist/ReactToastify.css';\nimport './login.css'\nimport { WebApi } from '../../api/WebApi';\nimport { UsuarioRepository } from '../../api/UsuarioRepository';\nimport { Notificacao } from '../notificacao/Notificacao';\nimport { Auth } from '../../api/Auth';\n\nexport class Login extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            usuario: this.initializeUsuario(),\n            logando: false,\n            auth: Auth.get()\n        }\n\n        this.login = this.login.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e, obj) {\n        const element = obj !== undefined ? obj : e.target\n        const usuario = this.state.usuario\n        usuario[element.name] = element.value\n        this.setState({ usuario: usuario })\n    }\n\n    async componentWillMount() {\n        console.log(Auth.get());\n        if (Auth.get() !== null) {\n            this.props.history.push('/dashboard')\n        }\n    }\n\n    async componentDidMount() {\n        this.setState({ usuario: this.initializeUsuario() })\n    }\n\n    async login() {\n        this.setState({ logando: true })\n        const resultado = await UsuarioRepository.login(this.state.usuario)\n        this.setState({ logando: false })\n\n        if (resultado.data.flag) {\n            Auth.save(resultado)\n            this.setState({ auth: resultado.data.obj })\n            this.props.history.push('/dashboard')\n        }\n        else\n            Notificacao.gerar(resultado)\n    }\n\n    initializeUsuario() {\n        return {\n            email: '',\n            senha: ''\n        }\n    }\n\n    render() {\n        return (<Container textAlign=\"center\">\n            {this.redirectToDashBoard}\n            <Divider></Divider>\n            <Divider hidden />\n            <Image centered size='tiny' className=\"inline-block\" src={WebApi.getUrl() + 'assets/images/incompany.png'} />\n            <Header>Incompany\n                     <Label basic> Trainning app</Label>\n            </Header>\n            <Segment compact textAlign=\"left\" className=\"inline-block\">\n                <Form>\n                    <Form.Field>\n                        <label>E-mail</label>\n                        <input onChange={this.handleChange} size=\"small\" name=\"email\" type=\"text\" placeholder=\"E-mail\" />\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Senha</label>\n                        <input onChange={this.handleChange} size=\"small\" name=\"senha\" type=\"password\" placeholder=\"Senha\" />\n                    </Form.Field>\n                    <Button disabled={this.state.logando} loading={this.state.logando} onClick={this.login} size=\"small\" floated=\"right\" basic><Icon name=\"key\"></Icon> Entrar</Button>\n                </Form>\n            </Segment>\n            <Divider></Divider>\n            <Menu secondary>\n                <Menu.Menu position=\"left\">\n                    <Menu.Item\n                        name='section1'>\n                        Desenvolvido utilizando &nbsp;&nbsp;\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://react.io\"><Icon size=\"big\" name=\"react\"></Icon></a>\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://codeigniter.com\">\n                            <Image centered className=\"inline-block\" src={WebApi.getUrl() + 'assets/images/codeigniter.png'} />\n                        </a>\n                    </Menu.Item>\n                </Menu.Menu>\n                <Menu.Menu position=\"right\">\n                    <Menu.Item>\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/cardocha/incompany\"><Icon size=\"large\" name=\"github\"></Icon>Código Fonte</a>\n                    </Menu.Item>\n                    <Menu.Item>\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cardocha.github.io\"><Icon name=\"user\"></Icon>Luciano Cardoso</a>\n                    </Menu.Item>\n                </Menu.Menu>\n            </Menu>\n        </Container>)\n    };\n}\n","import React, { Component } from 'react';\nimport { BarraTopo } from '../BarraTopo';\nimport { Segment, Grid, Icon, Label, Divider, Header, List, Table, Button } from 'semantic-ui-react';\nimport { UsuarioRepository } from '../../api/UsuarioRepository';\nimport { CursoRepository } from '../../api/CursoRepository';\nimport { Link } from \"react-router-dom\";\n\nexport class UsuarioDetalhe extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            detalhesUsuario: [],\n            inscricoes: [],\n            usuarioSelecionado: {}\n        }\n\n    }\n\n    async componentDidMount() {\n        const detalhesUsuario = await UsuarioRepository.findById(this.props.match.params.id)\n        const usuarioSelecionado = detalhesUsuario.data[0]\n        const inscricoes = await CursoRepository.findByIncricaoUsuario(usuarioSelecionado.usuarioId)\n\n        this.setState({ usuarioSelecionado: usuarioSelecionado })\n        this.setState({ detalhesUsuario: detalhesUsuario.data })\n        this.setState({ inscricoes: inscricoes.data })\n    }\n\n    isCursoConcluido(dadosConclusao) {\n        const concluido = Number(dadosConclusao.percentual_total);\n        const minimo = Number(dadosConclusao.percentual_docs) + Number(dadosConclusao.percentual_questoes)\n        return concluido >= minimo\n    }\n\n    initializeUsuario() {\n        return { id: 0, nome: '', email: '', senha: '', tipo: '', dataCadastro: '' }\n    }\n\n    getTipoDocumento(nomeArquivo) {\n        if (nomeArquivo.includes(\".pdf\"))\n            return \"file pdf outline\";\n\n        if (nomeArquivo.includes(\".doc\"))\n            return \"file word outline\";\n\n        if (nomeArquivo.includes(\".xls\"))\n            return \"file excel outline\";\n\n        if (this.isImage(nomeArquivo))\n            return \"file image\"\n\n        if (this.isCompressed(nomeArquivo))\n            return \"file archive\"\n\n        return \"file outline\"\n    }\n\n    getMaterialIcon(tipo, url) {\n        switch (tipo) {\n            case 'V':\n                return \"play\"\n            case 'D':\n                return this.getTipoDocumento(url)\n            case 'Q':\n                return \"question circle outline\"\n        }\n    }\n\n    getPercentual(percentual, tipo) {\n        if (tipo !== \"Q\") {\n\n            if (percentual === null)\n                return (<Icon name=\"orange circle\"></Icon>)\n\n\n            if (Number(percentual) < 100)\n                return (<Icon name=\"orange circle\"></Icon>)\n            else\n                return (<Icon name=\"green check\"></Icon>)\n        }\n        else {\n\n            if (percentual === null)\n                return (<Label basic color=\"orange\">0%</Label>)\n\n            if (Number(percentual) < 70)\n                return (<Label basic color=\"orange\">{percentual + \"%\"}</Label>)\n            else\n                return (<Label basic color=\"green\">{percentual + \"%\"}</Label>)\n        }\n    }\n\n    groupBy = key => array =>\n        array.reduce((objectsByKeyValue, obj) => {\n            const value = obj[key];\n            objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(obj);\n            return objectsByKeyValue;\n        }, {});\n\n\n    render() {\n        return (\n            <div>\n                <BarraTopo></BarraTopo>\n                <Segment>\n                    <Link to={`/dashboard`}>\n                        <Button size=\"mini\" basic floated=\"right\"> Voltar aos cursos</Button>\n                    </Link>\n                    <Icon size=\"huge\" name=\"user\"></Icon>\n\n                    <Label size=\"big\" basic>{this.state.usuarioSelecionado.usuarioNome}</Label>\n                    <Label size=\"big\" basic>{this.state.usuarioSelecionado.usuarioEmail}</Label>\n\n                    <Segment>\n                        <Header>Cursos Inscritos / Situação</Header>\n                        <List celled horizontal>\n                            {this.state.inscricoes.map(inc => (\n                                <List.Item>\n                                    <Segment compact >{inc.titulo} &nbsp;&nbsp;&nbsp;&nbsp;\n                                        {this.isCursoConcluido(inc.dados_conclusao) ?\n                                            (<Label basic size=\"mini\" color=\"green\"> Aprovado</Label>) :\n                                            (<Label basic size=\"mini\" color=\"orange\"> Cursando</Label>)}\n                                    </Segment>\n                                </List.Item>\n                            ))}\n                        </List>\n                        <Header>Materiais e Questionários</Header>\n                        <Table celled selection>\n                            <Table.Header>\n                                <Table.Row>\n                                    <Table.HeaderCell>Curso</Table.HeaderCell>\n                                    <Table.HeaderCell>Material / Questionário</Table.HeaderCell>\n                                    <Table.HeaderCell>Tipo</Table.HeaderCell>\n                                    <Table.HeaderCell>Aprovação</Table.HeaderCell>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {this.state.detalhesUsuario.map(d => (\n\n                                    <Table.Row>\n                                        <Table.Cell>\n                                            <span>{d.cursoTitulo}</span>\n                                        </Table.Cell>\n                                        <Table.Cell>\n                                            <span>{d.materialTitulo}</span>\n                                        </Table.Cell>\n                                        <Table.Cell>\n                                            <span><Icon name={this.getMaterialIcon(d.tipo, d.url)}></Icon></span>\n                                        </Table.Cell>\n                                        <Table.Cell>\n                                            <span>{this.getPercentual(d.percentual, d.tipo)}</span>\n                                        </Table.Cell>\n                                    </Table.Row>\n\n                                ))}\n                            </Table.Body>\n                        </Table>\n                    </Segment>\n                </Segment>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Dashboard } from './components/Dashboard';\nimport { CursoDetalhe } from './components/curso/CursoDetalhe';\nimport { Login } from './components/login/Login';\nimport { UsuarioDetalhe } from './components/usuario/UsuarioDetalhe';\n\ntoast.configure()\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={Login}></Route>\n        <Route path=\"/login\" exact component={Login}></Route>\n        <Route path=\"/dashboard\" exact component={Dashboard}></Route>\n        <Route path=\"/cursos/:id\" exact component={CursoDetalhe}></Route>\n        <Route path=\"/usuarios/:id\" exact component={UsuarioDetalhe}></Route>\n      </Switch>\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}